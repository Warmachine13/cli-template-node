"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"CreateError",{enumerable:true,get:()=>CreateError});const _errors=require("../entities/errors/index");const _constants=require("../../constants");const _entities=require("../entities");function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class CreateError{handle(pathFull,name="Error",test=true,properites=undefined,onlyTest=false){if(!onlyTest){const fileInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_ERROR)});if(fileInString==null){throw new _errors.FileNotFound}const titleConversion=new _entities.TitleConversion(name);const UpperCase=titleConversion.GetCamelCaseName();const titleFormated=titleConversion.GetFormatedTitleFileName();const path=titleConversion.getPathFromTitle();const replacedFileString=new _entities.FormatDocument(fileInString,UpperCase,properites).formatDocument();const pathFolder=`${pathFull}/src/${_constants.PATH_ERROR_APLICATION}`;const createFile=new _entities.CreateFile(this.fileStorage,this.pathResolver);const pathToWrite=createFile.createFile(`${pathFolder}/${path}`,replacedFileString,titleFormated);this.logger.log({message:`
 diretorio do error: ${pathToWrite}`});createFile.createIndex(path,pathFolder,titleFormated);return replacedFileString}}constructor(fileStorage,pathResolver,logger){_defineProperty(this,"fileStorage",void 0);_defineProperty(this,"pathResolver",void 0);_defineProperty(this,"logger",void 0);this.fileStorage=fileStorage;this.pathResolver=pathResolver;this.logger=logger}}