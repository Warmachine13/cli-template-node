"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"CreateUseCase",{enumerable:true,get:()=>CreateUseCase});const _errors=require("../entities/errors/index");const _constants=require("../../constants/index");const _entities=require("../entities/index");const _createFile=require("../entities/CreateFile");const NEXT_INDEX=1;const FIRST_INDEX=0;class CreateUseCase{handle(pathFull,name="UseCase",test=true,properites=undefined,onlyTest=false){const titleConversion=new _entities.TitleConversion(name);const UpperCase=titleConversion.GetCamelCaseName();const titleFormated=titleConversion.GetFormatedTitleFileName();const path=titleConversion.getPathFromTitle();console.log("usecase");console.log(titleConversion,UpperCase,titleFormated,path);if(!onlyTest){const fileInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_USE_CASE)});if(fileInString==null){throw new _errors.FileNotFound}const replacedFileString=new _entities.FormatDocument(fileInString,UpperCase,properites).formatDocument();const pathFolder=`${pathFull}/src/${_constants.PATH_USE_CASE_DOMAIN}/${path}`;const createFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathToWrite=createFile.createFile(pathFolder,replacedFileString,titleFormated);let pathCombined="";const splitedPath=path.split("/");console.log(splitedPath);splitedPath.forEach((pathSplited,index)=>{console.log(pathSplited,index);const nextPath=splitedPath[index+NEXT_INDEX];console.log(nextPath);if(pathSplited&&nextPath){pathCombined+=index===FIRST_INDEX?`${pathSplited}`:`${pathSplited}`;this.fileStorage.appendFile({path:`${pathFull}/src/${pathCombined}/index.ts`,content:`export * from './${nextPath}'
`})}});this.fileStorage.appendFile({path:`${pathFolder}/index.ts`,content:`export * from './${titleFormated.replace(".ts","")}'
`});this.logger.log({message:`
 diretorio do Usecase ${pathToWrite}`});const fileFactoryInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_USE_CASE_FACTORY)});const replacedFactoryFileString=new _entities.FormatDocument(fileFactoryInString,UpperCase,properites).formatDocument();const pathFactoryFolder=`${pathFull}/src/${_constants.PATH_USE_CASE_GATEWAY}/${path}`;const createFactoryFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathToFactoryWrite=createFactoryFile.createFile(pathFactoryFolder,replacedFactoryFileString,titleFormated);this.logger.log({message:`
 diretorio do factory gateway ${pathToFactoryWrite}`});this.fileStorage.appendFile({path:`${pathFactoryFolder}/index.ts`,content:`export * from './${titleFormated.replace(".ts","")}'
`})}const fileInTestString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_USE_CASE_TEST)});if(fileInTestString==null){throw new _errors.CouldNotWrite}if(onlyTest||test){const createFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathTestFolder=`${pathFull}/tests/${_constants.PATH_USE_CASE_DOMAIN}/${path}`;const replacedFileString=new _entities.FormatDocument(fileInTestString,UpperCase,properites).formatDocument();const pathToWriteTest=createFile.createFile(pathTestFolder,replacedFileString,titleFormated.replace(".ts",".spec.ts"));this.logger.log({message:`
 diretorio do usecase test ${pathToWriteTest}`})}return"replacedFileString"}constructor(fileStorage,pathResolver,logger){this.fileStorage=fileStorage;this.pathResolver=pathResolver;this.logger=logger}}