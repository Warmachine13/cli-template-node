"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"CreateController",{enumerable:true,get:()=>CreateController});const _errors=require("../entities/errors/index");const _constants=require("../../constants/index");const _entities=require("../entities/index");const _createFile=require("../entities/CreateFile");class CreateController{handle(pathFull,name="Controller",test=true,properites=undefined,onlyTest=false){const titleConversion=new _entities.TitleConversion(name);const UpperCase=titleConversion.GetCamelCaseName();const titleFormated=titleConversion.GetFormatedTitleFileName();const path=titleConversion.getPathFromTitle();if(!onlyTest){const fileInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_CONTROLLER)});if(fileInString==null){throw new _errors.FileNotFound}const replacedFileString=new _entities.FormatDocument(fileInString,UpperCase,properites).formatDocument();const pathFolder=`${pathFull}/src/${_constants.PATH_CONTROLLER_APLICATION}`;const createFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathToWrite=createFile.createFile(`${pathFolder}/${path}`,replacedFileString,titleFormated);this.logger.log({message:`
 diretorio da controller ${pathToWrite}`});createFile.createIndex(path,pathFolder,titleFormated);const fileFactoryInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_FACTORY_CONTROLLER)});const replacedFactoryFileString=new _entities.FormatDocument(fileFactoryInString,UpperCase,properites).formatDocument();const pathFactoryFolder=`${pathFull}/src/${_constants.CONTROLLER_FACTORY_PATH}`;const createFactoryFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathToFactoryWrite=createFactoryFile.createFile(`${pathFactoryFolder}/${path}`,replacedFactoryFileString,titleFormated);this.logger.log({message:`
 diretorio do factory controller ${pathToFactoryWrite}`});createFile.createIndex(path,pathFactoryFolder,titleFormated)}const fileInTestString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_CONTROLLER_TEST)});if(fileInTestString===""){throw new _errors.CouldNotWrite}if(onlyTest||test){const createFile=new _createFile.CreateFile(this.fileStorage,this.pathResolver);const pathTestFolder=`${pathFull}/tests/${_constants.PATH_CONTROLLER_APLICATION}/`;const pathToWriteTest=createFile.createFile(pathTestFolder,fileInTestString,titleFormated.replace(".ts",".spec.ts"));this.logger.log({message:`
 diretorio da controller test ${pathToWriteTest}`})}return fileInTestString}constructor(fileStorage,pathResolver,logger){this.fileStorage=fileStorage;this.pathResolver=pathResolver;this.logger=logger}}