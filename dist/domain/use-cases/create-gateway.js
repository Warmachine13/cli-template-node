"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"CreateGateway",{enumerable:true,get:function(){return CreateGateway}});const _errors=require("../entities/errors/index");const _constants=require("../../constants");const _entities=require("../entities");function _define_property(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class CreateGateway{handle(pathFull,name="Gateway",test=true,properites=undefined,onlyTest=false){const titleConversion=new _entities.TitleConversion(name);const UpperCase=titleConversion.GetCamelCaseName();const titleFormated=titleConversion.GetFormatedTitleFileName();const path=titleConversion.getPathFromTitle();if(!onlyTest){const fileInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_GATEWAY)});if(fileInString==null){throw new _errors.FileNotFound}const replacedFileString=new _entities.FormatDocument(fileInString,UpperCase,properites).formatDocument();const originalPath=`${pathFull}/src/${_constants.GATEWAY_PATH_APPLICATION}`;const pathFolder=`${originalPath}/${path}`;const createFile=new _entities.CreateFile(this.fileStorage,this.pathResolver);const pathToWrite=createFile.createFile(pathFolder,replacedFileString,titleFormated);this.logger.log({message:`
 diretorio do gateway ${pathToWrite}`});createFile.createIndex(path,originalPath,titleFormated);const fileFactoryInString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_FACTORY_GATEWAY)});const replacedFactoryFileString=new _entities.FormatDocument(fileFactoryInString,UpperCase,properites).formatDocument();const pathFactoryFolder=`${pathFull}/src/${_constants.GATEWAY_FACTORY_PATH}`;const createFactoryFile=new _entities.CreateFile(this.fileStorage,this.pathResolver);const pathToFactoryWrite=createFactoryFile.createFile(`${pathFactoryFolder}/${path}`,replacedFactoryFileString,titleFormated);this.logger.log({message:`
 diretorio do factory gateway ${pathToFactoryWrite}`});createFile.createIndex(path,pathFactoryFolder,titleFormated)}const fileInTestString=this.fileStorage.readFileString({path:this.pathResolver.pathresolve(__dirname,_constants.PATH_GATEWAY_TEST)});if(fileInTestString===""){throw new _errors.CouldNotWrite}if(onlyTest||test){const createFile=new _entities.CreateFile(this.fileStorage,this.pathResolver);const pathTestFolder=`${pathFull}/tests/${_constants.GATEWAY_PATH_APPLICATION}/${path}`;const testnameFile=titleFormated.replace(".ts",".spec.ts");const replacedFactoryTestFileString=new _entities.FormatDocument(fileInTestString,UpperCase,properites).formatDocument();const pathToWriteTest=createFile.createFile(pathTestFolder,replacedFactoryTestFileString,testnameFile);this.logger.log({message:`
 diretorio da entidade test ${pathToWriteTest}`})}return"item"}constructor(fileStorage,pathResolver,logger){_define_property(this,"fileStorage",void 0);_define_property(this,"pathResolver",void 0);_define_property(this,"logger",void 0);this.fileStorage=fileStorage;this.pathResolver=pathResolver;this.logger=logger}}